generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  USER
  MODERATOR
  ADMIN
}

enum SubmissionStatus {
  PENDING
  APPROVED
  REJECTED
}

enum FileType {
  IMAGE
  VIDEO
}

enum PayoutStatus {
  PENDING
  COMPLETED
  CANCELLED
}

model User {
  id             String    @id @default(uuid())
  epicId         String    @unique @map("epic_id")
  nickname       String
  balance        Float     @default(0)
  role           UserRole  @default(USER)
  isBanned       Boolean   @default(false) @map("is_banned")
  lastSubmission DateTime? @map("last_submission")
  createdAt      DateTime  @default(now()) @map("created_at")
  updatedAt      DateTime  @updatedAt @map("updated_at")

  submissions         Submission[]
  payouts             Payout[]
  adminLogs           AdminLog[]
  adminPayouts        Payout[]     @relation("AdminPayouts")
  reviewedSubmissions Submission[] @relation("ReviewedSubmissions")

  @@map("users")
}

model Submission {
  id           String           @id @default(uuid())
  userId       String           @map("user_id")
  fileUrl      String           @map("file_url")
  fileName     String           @map("file_name")
  fileType     FileType         @map("file_type")
  fileSize     Int              @map("file_size")
  category     String
  description  String?
  status       SubmissionStatus @default(PENDING)
  rejectReason String?          @map("reject_reason")
  reviewedBy   String?          @map("reviewed_by")
  reviewedAt   DateTime?        @map("reviewed_at")
  createdAt    DateTime         @default(now()) @map("created_at")
  updatedAt    DateTime         @updatedAt @map("updated_at")

  user     User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  reviewer User? @relation("ReviewedSubmissions", fields: [reviewedBy], references: [id])

  @@map("submissions")
}

model Payout {
  id          String       @id @default(uuid())
  userId      String       @map("user_id")
  amount      Float
  reason      String
  status      PayoutStatus @default(PENDING)
  adminId     String       @map("admin_id")
  createdAt   DateTime     @default(now()) @map("created_at")
  completedAt DateTime?    @map("completed_at")

  user  User @relation(fields: [userId], references: [id], onDelete: Cascade)
  admin User @relation("AdminPayouts", fields: [adminId], references: [id])

  @@map("payouts")
}

model AdminLog {
  id        String   @id @default(uuid())
  adminId   String   @map("admin_id")
  action    String
  details   String
  ipAddress String?  @map("ip_address")
  userAgent String?  @map("user_agent")
  createdAt DateTime @default(now()) @map("created_at")

  admin User @relation(fields: [adminId], references: [id], onDelete: Cascade)

  @@map("admin_logs")
}

model Settings {
  id    String @id @default(uuid())
  key   String @unique
  value String

  @@map("settings")
}